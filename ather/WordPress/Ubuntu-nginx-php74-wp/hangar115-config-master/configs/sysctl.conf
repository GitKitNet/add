#
# /etc/sysctl.conf - Configuration file for setting system variables
# See /etc/sysctl.d/ for additional system variables.
# See sysctl.conf (5) for information.
#

#kernel.domainname = example.com

# Uncomment the following to stop low-level messages on console
#kernel.printk = 3 4 1 3

##############################################################3
# Functions previously found in netbase
#

# Uncomment the next two lines to enable Spoof protection (reverse-path filter)
# Turn on Source Address Verification in all interfaces to
# prevent some spoofing attacks
#net.ipv4.conf.default.rp_filter=1
#net.ipv4.conf.all.rp_filter=1

# Uncomment the next line to enable TCP/IP SYN cookies
# See http://lwn.net/Articles/277146/
# Note: This may impact IPv6 TCP sessions too
#net.ipv4.tcp_syncookies=1

# Uncomment the next line to enable packet forwarding for IPv4
#net.ipv4.ip_forward=1

# Uncomment the next line to enable packet forwarding for IPv6
#  Enabling this option disables Stateless Address Autoconfiguration
#  based on Router Advertisements for this host
#net.ipv6.conf.all.forwarding=1


###################################################################
# Additional settings - these settings can improve the network
# security of the host and prevent against some network attacks
# including spoofing attacks and man in the middle attacks through
# redirection. Some network environments, however, require that these
# settings are disabled so review and enable them as needed.
#
# Do not accept ICMP redirects (prevent MITM attacks)
#net.ipv4.conf.all.accept_redirects = 0
#net.ipv6.conf.all.accept_redirects = 0
# _or_
# Accept ICMP redirects only for gateways listed in our default
# gateway list (enabled by default)
# net.ipv4.conf.all.secure_redirects = 1
#
# Do not send ICMP redirects (we are not a router)
#net.ipv4.conf.all.send_redirects = 0
#
# Do not accept IP source route packets (we are not a router)
#net.ipv4.conf.all.accept_source_route = 0
#net.ipv6.conf.all.accept_source_route = 0
#
# Log Martian Packets
#net.ipv4.conf.all.log_martians = 1
#

# Accept IPv6 advertisements when forwarding is enabled
net.ipv6.conf.all.accept_ra = 2

# IP Spoofing protection
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1
# Block SYN attacks
net.ipv4.tcp_syncookies = 1
# Controls IP packet forwarding
net.ipv4.ip_forward = 0
# Ignore ICMP redirects
net.ipv4.conf.all.accept_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
# Ignore send redirects
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
# Disable source packet routing
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0
# Log Martians
net.ipv4.conf.all.log_martians = 1
# Block SYN attacks
net.ipv4.tcp_max_syn_backlog = 2048
# Number of times SYNACKs for passive TCP connection.
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 5
# Log Martians
net.ipv4.icmp_ignore_bogus_error_responses = 1
# Ignore ICMP broadcast requests
net.ipv4.icmp_echo_ignore_broadcasts = 1
# Ignore Directed pings
net.ipv4.icmp_echo_ignore_all = 1
kernel.exec-shield = 1
kernel.randomize_va_space = 1
# disable IPv6 if required (IPv6 might caus issues with the Internet connection being slow)
net.ipv6.conf.all.disable_ipv6 = 0
net.ipv6.conf.default.disable_ipv6 = 0
net.ipv6.conf.lo.disable_ipv6 = 0
# Accept Redirects? No, this is not router
net.ipv4.conf.all.secure_redirects = 0
# Log packets with impossible addresses to kernel log? yes
net.ipv4.conf.default.secure_redirects = 0

# [IPv6] Number of Router Solicitations to send until assuming no routers are present.
# This is host and not router.
net.ipv6.conf.default.router_solicitations = 0
# Accept Router Preference in RA?
net.ipv6.conf.default.accept_ra_rtr_pref = 0
# Learn prefix information in router advertisement.
net.ipv6.conf.default.accept_ra_pinfo = 0
# Setting controls whether the system will accept Hop Limit settings from a router advertisement.
net.ipv6.conf.default.accept_ra_defrtr = 0
# Router advertisements can cause the system to assign a global unicast address to an interface.
net.ipv6.conf.default.autoconf = 0
# How many neighbor solicitations to send out per address?
net.ipv6.conf.default.dad_transmits = 0
# How many global unicast IPv6 addresses can be assigned to each interface?
net.ipv6.conf.default.max_addresses = 1

# In rare occasions, it may be beneficial to reboot your server reboot if it runs out of memory.
# This simple solution can avoid you hours of down time. The vm.panic_on_oom=1 line enables panic
# on OOM; the kernel.panic=10 line tells the kernel to reboot ten seconds after panicking.
vm.panic_on_oom = 1
kernel.panic = 10
kernel.sysrq = 0
net.ipv4.conf.default.log_martians = 1
net.ipv4.tcp_timestamps = 0


vm.overcommit_memory = 1
# Increase the maximum file limit
net.ipv4.tcp_syncookies = 1
#Enable SYN cookies, prevent SYN overflow attack
net.ipv4.tcp_tw_reuse = 1
#TCP connection reuse
net.ipv4.tcp_tw_recycle = 0
#Serious vuln here, google for more, so disable it
net.ipv4.tcp_fin_timeout = 30
#Decrease timeout time by half, default is 60
net.ipv4.tcp_keepalive_time = 1200
#increase keepalive time for long connections
net.ipv4.tcp_max_syn_backlog = 8192
#increase max SYN backlog
net.ipv4.tcp_max_tw_buckets = 5000
#increase timewait buckets
net.ipv4.tcp_fastopen = 3
#Enable tcp fastopen!
#######Buffer tuning##############

#This part I used very, very aggressive settings for a ideal network 
#environment. Decrease the numbers if you felt uncomfy for your own.

# increase TCP max buffer size settable using setsockopt()
net.core.rmem_max = 1342177280 net.core.wmem_max = 1342177280

# increase Linux autotuning TCP buffer limit
net.ipv4.tcp_rmem = 163840 3495200 268754560
net.ipv4.tcp_wmem = 163840 3495200 268754560
net.ipv4.udp_rmem_min = 163840 3495200 268754560
net.ipv4.udp_wmem_min = 163840 3495200 268754560
net.ipv4.tcp_mem = 268754560 268754560 268754560
net.ipv4.udp_mem = 268754560 268754560 268754560

# increase the length of the processor input queue
net.core.netdev_max_backlog = 300000

# recommended for hosts with jumbo frames enabled
#What is jumbo frames?
#Jumbo frame support very, very large MTUs(maximum size of a packet, #normally 1500, can be more by jumbo frame)
net.ipv4.tcp_mtu_probing=1

#set tcp_congestion_control algorithm to htcp, can be hybla also
#You need to enable htcp from kernel first
#to do this, execute in a root shell
#/sbin/modprobe tcp_hybla
#/sbin/modprobe tcp_htcp
#Also other algorithms suchas westwood can be enabled this way. Please check
#the wikipedia page for congestion algorithms for reference.
net.ipv4.tcp_congestion_control=htcp

#Suggested by Ilya Grigorik in his book , contributes to congestion control, sets window bigger in idle
net.ipv4.tcp_slow_start_after_idle=0


### IMPROVE SYSTEM MEMORY MANAGEMENT ###

# Increase size of file handles and inode cache
#fs.file-max = 70000000000000000000

# Do less swapping
#vm.swappiness = 10
#vm.dirty_ratio = 60
#vm.dirty_background_ratio = 2

### GENERAL NETWORK SECURITY OPTIONS ###

# Protect Against TCP Time-Wait
net.ipv4.tcp_rfc1337 = 1

# Decrease the time default value for connections to keep alive
#net.ipv4.tcp_keepalive_time = 300
#net.ipv4.tcp_keepalive_probes = 5
#net.ipv4.tcp_keepalive_intvl = 15

# Controls the maximum size of a message, in bytes
#kernel.msgmnb = 65536

# Controls the default maxmimum size of a mesage queue
#kernel.msgmax = 65536

# Controls the maximum shared segment size, in bytes
#kernel.shmmax = 68719476736

# Controls the maximum number of shared memory segments, in pages
#kernel.shmall = 4294967296
