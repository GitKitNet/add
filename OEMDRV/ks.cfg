#===============================================
#                 ks.cfg
#             CentOS 7 minimal 
#              version=DEVEL
#===============================================

# System authorization information
auth --enableshadow --passalgo=sha512
# Install OS instead of upgrade
install
# License agreement
eula --agreed
# - network installation
#url --url="https://mirror.yandex.ru/centos/7/os/x86_64"
#url --url="http://mirror.mirohost.net/centos/7/os/x86_64"
#url --url="http://mirrors.bytes.ua/centos/7/os/x86_64"
# - CDROM installation
cdrom

# - graphical installation
#graphical
text

# Run the Setup Agent on first boot ###
#group --name=ftp
firstboot --enable

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us','ru' --switch='grp:ctrl_shift_toggle'
# System language
lang ru_UA.UTF-8


# Network information
#-----------------------------------------------
network  --bootproto=dhcp --device=auto --ipv6=auto --activate
network  --hostname=localhost.localdomain

# System timezone
timezone Europe/Kiev --isUtc --ntpservers=0.centos.pool.ntp.org,1.centos.pool.ntp.org,2.centos.pool.ntp.org,3.centos.pool.ntp.org,ua.pool.ntp.org

#      параметры пользователей
#-----------------------------------------------
# rootpw —lock — запрет подключения к серверу root-ом
# rootpw --lock
#
# Пароль пользователя root и админ можно сгенерировать заранее";
# PASSWORD=centos; python -c "import crypt,random,string; print crypt.crypt(\"$PASSWORD\", '\$6\$' + ''.join([random.choice(string.ascii_letters + string.digits) for _ in range(16)]))" ;
rootpw --disabled
user --groups=wheel --name=centos --password centos --gecos="centos"
user centos --fullname "Centos User" --password centos


#            Add ssh user key
#-----------------------------------------------
#     ed25519 SSH key 
sshkey --username=root "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKp3bxeApwQec9N6DaIP1Iq3o7Ks4jcL66wHi1YdqkFC root"
sshkey --username=centos "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIO3nyIJFszoNVmLolr3gV+yOJyCT+0ImsOH/C3rZloR4 centos"

# System services
#services --disabled=autofs,alsa-state,avahi-daemon,bluetooth,pcscd,cachefilesd,colord,fancontrol,fcoe,firewalld,firstboot-graphical,gdm,httpd,initial-setup,initial-setup-text,initial-setup-graphical,initial-setup-reconfiguration,kdump,libstoragemgmt,ModemManager,tog-pegasus,tmp.mount,tuned \
#  --enabled=bacula-fd,chronyd,edac,gpm,numad,rsyslog,sendmail,smartd,sm-client,sssd,zabbix-agent		
#services --disabled=NetworkManager
services --enabled="chronyd"

#     FIREWALL RULE
#firewall --enabled --port=22822:tcp
#firewall --disabled --service=ssh




#-----------------------------------------------
#       Disk partitioning information
#-----------------------------------------------
%pre --interpreter=/usr/bin/bash --log=/tmp/kickstart_bash_pre-tmp.log
#!/usr/bin/bash --log=/tmp/kickstart_bash_pre-tmp.log

scName="ks.pre.partition.sh"
outfile="/tmp/pre-part-include";

if [ -d "/tmp" ]; then mkdir -p "/tmp"; fi;
if [ -f "$outfile" ]; then touch "$outfile"; fi;


# Автоматическая розметка диска
#autopart --type=lvm
#System bootloader configuration
bootloader --location=mbr 
#Clear the Master Boot Record
zerombr yes
#Partition clearing information
clearpart --all --initlabel 


CreatePartFile() {
	BOOTs=1024
	BIOSBOOTs=2
	SEC_Size=0
	MASTER=$(fdisk -l|grep -E "/dev/[v_h_s]d[a-z]:" -m 1 | awk '{print $2 }' | sed -e 's/\/dev\/sd/sd/g' -e 's/\://g'); echo $MASTER
	SLAVE=`$(fdisk -l|grep -E "/dev/[v_h_s]d[a-z]:" -m 2 | grep -vi "$PRIMARY" | awk '{print $2 }' | sed -e 's/\/dev\/sd/sd/g' -e 's/\://g')`; echo $SLAVE

	RAM="`free -m | grep Mem | awk '{print $2}'`"; echo "$RAM"
	SWAP_allowed=$(($RAM * 2)); echo "$SWAP_allowed"
	PRIMARY_Size="$(($(fdisk -l |grep -E "/dev/[v_h_s]d[a-z]:" -m 1 |awk '{print $5}') / 1024 / 1024))"; echo $PRIMARY_Size
	SEC_Size="$(($(fdisk -l |grep -E "/dev/[v_h_s]d[a-z]:" -m 2 | grep -vi "$PRIMARY" |awk '{print $5}') / 1024 / 1024))"; echo $SEC_Size
	ROOT_allowed=$(($PRIMARY_Size / 100 * 35)); echo $ROOT_allowed
	HOME_allowed=$(($PRIMARY_Size - $SWAP_allowed - $ROOT_allowed - $BOOTs - $BIOSBOOTs)); echo $HOME_allowed
	PRIMARY_allowed=$(($PRIMARY_Size - $SWAP_allowed - $BOOTs - $BIOSBOOTs)); echo $PRIMARY_allowed
	SWAP=$SWAP_allowed
	ROOTSIZE=$ROOT_allowed
	ROOT_SIZE=$PRIMARY_allowed
	HOMESIZE=HOME_allowed
	get_disktype=$1
	GET_DISKNU=$2


	echo "# $(date +%Y%m%d_%k%M%S)" >> $outfile;

	if [ "$GET_DISKNU" -gt 1 ]; then
		echo "# 2 Disk partitioning" >> $outfile
		echo "ignoredisk --only-use=${MASTER}, ${SLAVE}" >> $outfile
		echo "clearpart --all --initlabel" >> $outfile
		#echo "clearpart --all --initlabel --drives=${MASTER}, ${SLAVE}" >> $outfile
		echo "bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=${MASTER}, ${SLAVE}" >> $outfile
		echo "part /boot     --fstype=ext4     --size=$BOOTs    --ondisk=${MASTER} --asprimary" >> $outfile
		#echo "part /biosboot --fstype=biosboot --size=$BIOSBOOTs    --ondisk=${MASTER} --asprimary" >> $outfile
		echo "part swap      --fstype=swap     --size=$SWAP    --ondisk=${MASTER} --asprimary" >> $outfile
		echo "part /         --fstype=ext4     --size=$ROOT_SIZE --ondisk=${MASTER} --asprimary --grow" >> $outfile
		echo "part /home     --fstype=ext4     --size=$SEC_Size --ondisk=${SLAVE} --grow">> $outfile
	elif [ "$GET_DISKNU" -eq 1 ]; then
		echo "# 1 Disk partitioning" >> $outfile
		echo "ignoredisk --only-use=${MASTER}" >> $outfile
		echo "clearpart --all --initlabel" >> $outfile
		#echo "clearpart --all --initlabel --drives=${MASTER}" >> $outfile
		echo "bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=${MASTER}" >> $outfile
		echo "part /boot     --fstype=ext4     --size=$BOOTs    --ondisk=${MASTER} --asprimary" >> $outfile
		#echo "part /biosboot --fstype=biosboot --size=$BIOSBOOTs    --ondisk=${MASTER} --asprimary" >> $outfile
		echo "part swap      --fstype=swap     --size=$SWAP    --ondisk=${MASTER} --asprimary" >> $outfile
		echo "part /         --fstype=ext4     --size=$ROOTSIZE --ondisk=${MASTER} --asprimary --grow" >> $outfile
		#echo "part /home     --fstype=ext4     --size=$HOMESIZE --ondisk=${MASTER} --asprimary --grow" >> $outfile
	fi;
};


CheckDiskType() {
	disktype="default"
	disknu=0
	for t in "vd" "sd" "hd"; do
	fdisk -l|grep -E "/dev/${t}[a-z]:" >>/dev/null
	if [ $? -eq 0 ];then
		if [ `fdisk -l|grep -E "/dev/${t}[a-z]:"|wc -l` -gt 1 ]; then 
			disknu=`fdisk -l|grep -E "/dev/${t}[a-z]:"|wc -l`; echo $disknu;
		else 
			disknu=1; echo $disknu;
		fi;
		disktype="$t"; echo $disktype;
	fi;
	done;
	CreatePartFile $disktype $disknu
};

CheckDiskType
cat $outfile

%end



# part pv.699 --fstype="lvmpv" --ondisk=sda --size=297046
# grow - Эта команда указывает установщику anaconda создать максимально большой раздел.
# pv.699 - не используется после установки

# part biosboot --fstype="biosboot" --ondisk=sda --size=2
# part pv.699 --fstype="lvmpv" --ondisk=sda --size=304220
# part /boot --fstype="ext4" --ondisk=sda --size=1022 --label=BOOT
# volgroup nnserver --pesize=4096 pv.699
# logvol swap  --fstype="swap" --size=8196 --name=swap --vgname=nnserver
# logvol /home  --fstype="xfs" --size=184320 --label="HOME" --name=home --vgname=nnserver
# logvol /  --fstype="xfs" --size=111700 --label="ROOT" --name=root --vgname=nnserver




#===============================================
#      3. Package installation
#-----------------------------------------------
#url --url="http://mirror.mirohost.net/centos/7/os/x86_64/"
#url --url="http://centos.ip-connect.vn.ua/7/os/x86_64/"
#url --url="http://mirrors.bytes.ua/centos/7/os/x86_64/"
#url --url="https://mirror.yandex.ru/centos/7/os/x86_64/"
#repo --install --name="CentOS" --baseurl="http://mirror.centos.org/centos/7/os/x86_64/"
#repo --name="CentOS" --baseurl="https://mirror.yandex.ru/centos/7/os/x86_64/"
#repo --name="EPEL" --baseurl="https://dl.fedoraproject.org/pub/epel/7/x86_64/"
#repo -–name="EPEL" -–baseurl="http://download.fedoraproject.org/pub/epel/7/x86_64/"
#repo --install --name="ELRepo" --baseurl="http://mirror.mirohost.net/centos/7/extras/x86_64/Packages/elrepo-release-7.0-4.el7.elrepo.noarch.rpm"
#repo --install --name="ELRepo" --baseurl="http://mirror.mirohost.net/centos/7/extras/x86_64/"
#repo --install --name="EPEL" --baseurl="http://mirror.mirohost.net/centos/7/extras/x86_64/"
#repo --name="CentOS" --baseurl="http://mirror.mirohost.net/centos/7/os/x86_64/"
#repo --name="EPEL" --baseurl="https://dl.fedoraproject.org/pub/epel/7/x86_64/"
#repo -–name="EPEL" -–baseurl="http://mirror.mirohost.net/centos/7/os/x86_64/"
#repo -–name="ELRepo" -–baseurl="http://mirror.mirohost.net/centos/7/extras/x86_64/"
#repo -–name="elrepo" -–baseurl="https://elrepo.org/linux/elrepo/el7/x86_64/"


%packages --ignoremissing
@^minimal
@core
chrony
kexec-tools
sudo
# aide
#esc
#libreswan
#openscap
#openscap-scanner
#pam_pkcs11
#scap-security-guide
#@base
#@web-server
#@^web-server-environment
#@system-admin-tools
#@php
#@debugging
#@compat-libraries
#@guest-agents

%end


#           Select profile
#-----------------------------------------------
#%addon org_fedora_oscap
#   content-type = scap-security-guide
#    profile = xccdf_org.ssgproject.content_profile_pci-dss
#%end

# KDump
%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

#                 pwpolicy
#-----------------------------------------------
%anaconda
	pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
	pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
	pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end


%post

#-----------------------------------------------
# yum install -y policycoreutils-python
echo "centos ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/centos

# Change ssh port
#-----------------------------------------------
# /usr/bin/sed -i "s%#Port 22%Port 43389%g" "/etc/ssh/sshd_config"
# /usr/bin/sed -i "s%#PermitRootLogin yes%PermitRootLogin no%g" "/etc/ssh/sshd_config"
# /sbin/semanage port -a -t ssh_port_t -p tcp 22822
# /usr/bin/firewall-cmd --permanent --zone=public --remove-service=ssh
%end

# Reboot after installation
#reboot --eject 
reboot --kexec


%pre --log=/tmp/kickstart_pre.log
	echo "======== Currently mounted partitions %pre-install ========="
	echo "========== %pre --log=/tmp/kickstart_pre.log ========"
	df -Th
	echo "=================== Available memory ======================"
	free -m
	echo "### Kickstart pre install script completed at: `date` ####"
%end


%post --log=/var/log/kickstart_post.log
	echo "============= Currently mounted partitions %post ================"
	echo "========== %post --log=/var/log/kickstart_post.log ========"
	df -Th
	echo "=================== Available memory ======================"
	free -m
	echo "### Kickstart post install script completed at: `date` ####"
%end


%pre-install --log=/tmp/kickstart_pre_install.log
	echo "======== Currently mounted partitions %pre-install ========="
	echo "========== %pre-install --log=/tmp/kickstart_pre_install.log ========"
	df -Th
	echo "=================== Available memory ======================"
	free -m
	echo "### Kickstart pre install script completed at: `date` ####"
%end


#%include /run/install/repo/pre-part-include
#%include /run/install/repo/tmp-prtnew
#%include /run/install/repo/tmp-twodrive
%include /tmp/pre-part-include

%pre --interpreter=/usr/bin/bash --log=/tmp/kickstart_bash_pre.log
	echo "This is a sample bash script called at %pre stage"
%end





#####################################################
##******************** INFO ********************##
#* rootpw —lock   # — запрет подключения к серверу root-ом
#*
#* Пароль пользователя root и админ можно сгенерировать заранее";
#*  python -c 'import crypt; print(crypt.crypt("PASSW", "$6$My Salt"))'
#* 
#* read -p "Enter password: " PASSW; python -c "import crypt,random,string; print crypt.crypt(\"$PASSW\", '\$6\$' + ''.join([random.choice(string.ascii_letters + string.digits) for _ in range(16)]))" ;

##******************** INFO ********************##
